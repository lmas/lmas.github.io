#!/bin/sh

# set -o pipefail is undefined for POSIX
set -eu

panic() {
    # Print warning message to stderr and quit script
    # arg 1: message

    echo "ERROR: $1" >&2
    exit 1
}

getfilemeta() {
    # Get frontmatter field from a file with yml frontmatter meta data
    # arg 1: key field
    # arg 2: source file

    # Print everything between 1st line (---) to next --- line
    # 2nd - From matched key field at sol, print value field until eol
    sed -n "1,/^---$/p" "$2" | \
    sed -n "s/^$1:[\t ]*\(.*\)$/\1/p"
}

getmeta() (
    # Get meta data field
    # arg 1: field name

    # uses a sub shell here to scope vars locally (notice the parens for the func declaration)
    val=$(getfilemeta "$1" "$META")
    if [ -z "$val" ]; then
        panic "Missing key '$1' in $META"
    fi
    echo "$val"
)

getabstract() {
    # Get abstract of a markdown page (for now it's the first paragraph of the content).
    # Double quotes has to be stripped.
    # arg 1: source file

    cat "$1" | sed -e '1,/^---$/d' | awk 'BEGIN{RS=ORS="\n\n"} NR==1 {$1=$1; print}' | tr -d '"'
}

getcommit() {
    # Get the commit hash and date of a file's latest commit.
    # arg 1: source file

    git log -1 --format="%h %cs" "$1"
}

getdestination() (
    # Strips src dir from a filepath and replaces .md extension with .html
    # arg 1: path to src markdown file

    dst=${1#"$SRC/"}
    echo "${dst%.md}.html"
)

getmdfiles() {
    # Find all markdown files in src dir and sort them by date and title

    (
        find "$SRC" -iname "*.md" | while read -r file; do
            date=$(getfilemeta date "$file")
            title=$(getfilemeta title "$file")
            # Placement of the tab is important here, to avoid unwanted white space
            # Also have to use printf 'cuz POSIX don't have flags for echo cmd
            printf '%s %s \t%s\n' "$date" "$title" "$file"
        done
    ) | sort -r | while read -r line; do
        # split the line by the tab char and keep the last field only *by rev'ersing)
        echo "$line" | rev | cut -f 1 | rev
    done
}

filterblogposts() (
    # Filter out blog posts from a list of src files and optionally return max <no> of posts
    # arg 1: file list
    # arg 2: optional max number of files to return

    posts=$(echo "$1" | grep "$SRC/blog" | grep -v "/blog/index.md")
    if [ "$#" -gt 1 ]; then
        echo "$posts" | head -n "$2"
    else
        echo "$posts"
    fi
)

condensepost() (
    # Summarises a blog post to a single line item
    # arg 1: post file

    src="$1"
    dst=$(getdestination "$src")
    dst=$(dirname "$dst")
    title=$(getfilemeta title "$src")
    date=$(getfilemeta date "$src")
    abstract=$(getabstract "$src")
    echo "<li><time>$date</time><p><span><a href=\"/$dst/\">$title</a></span>$abstract</p></li>"
)

########################################################################################################################
# Initalize

META=".meta.yml"
PANDOC="pandoc --standalone --mathml --columns=80 --shift-heading-level-by=1 \
--metadata-file=$META --template=.template.html \
--write=html5 --read=gfm+tex_math_dollars+footnotes-autolink_bare_uris"

# Source and destination dirs (with optional trailing slash trimmed)
SRC=${1%/}
DST=${2%/}

# Site-wide metadata (with optional trailing slash trimmed)
SITE=$(getmeta site "$META") && SITE="${SITE%/}"
TITLE=$(getmeta title-prefix "$META")
AUTHOR=$(getmeta author "$META")
FILES=$(getmdfiles)

# Temporary file for quick 'n dirty file writes
TEMPO=$(mktemp)
# 0=exit, 1=hangup, 2=interrupt, 3=quit, 15=terminate
trap 'rm -f $TEMPO' 0 1 2 3 15

########################################################################################################################
# Pre-make dir structure

find "$SRC" -type d | while read -r srcdir; do
    dstdir=${srcdir#"$SRC/"}
    dstdir="$DST/$dstdir"
    mkdir -p "$dstdir"
done

########################################################################################################################
# Build sitemap

sitemap="$DST/sitemap.xml"
cat << EOF > "$sitemap"
<?xml version="1.0" encoding="utf-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
<url>
<loc>$SITE</loc>
<lastmod>$(date "+%Y-%m-%d")</lastmod>
</url>
EOF

echo "$FILES" | while read -r srcfile; do
    dstfile=$(getdestination "$srcfile")
    cat << EOF >> "$sitemap"
<url>
<loc>$SITE/$dstfile</loc>
</url>
EOF
done

echo "</urlset>" >> "$sitemap"

########################################################################################################################
# Build blog feed

feed="$DST/feed.xml"
cat << EOF > "$feed"
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>$TITLE</title>
<subtitle>The latest posts from $TITLE</subtitle>
<link href="$SITE" />
<link rel="self" href="$SITE/feed.xml" />
<updated>$(date "+%Y-%m-%dT%H:%M"):00Z</updated>
<author>
<name>$AUTHOR</name>
</author>
<rights>Copyright Â© $(date "+%Y") $AUTHOR</rights>
<id>$SITE/</id>
EOF

filterblogposts "$FILES" 25 | while read -r srcfile; do
    dstfile=$(getdestination "$srcfile")
    title=$(getfilemeta title "$srcfile")
    # Only got a date but the feed spec wants a full RFC-3339 datetime. Just tack zero time at the end
    date=$(getfilemeta date "$srcfile")
    abstract=$(getabstract "$srcfile")
    cat << EOF >> "$feed"
<entry>
<title>$title</title>
<id>$SITE/$dstfile</id>
<link href="$SITE/$dstfile" />
<updated>${date}T00:00:00Z</updated>
<summary>$abstract</summary>
</entry>
EOF
done

echo "</feed>" >> "$feed"

########################################################################################################################
# Build markdown files

blogposts=$(filterblogposts "$FILES" | while read -r srcfile; do
    post=$(condensepost "$srcfile")
    echo "  - $post"
done)

echo "$FILES" | while read -r srcfile; do
    dstfile=$(getdestination "$srcfile")
    dstfile="$DST/$dstfile"
    toc=""
    hastoc=$(getfilemeta toc "$srcfile")
    if [ "$hastoc" = "true" ]; then
        toc="--toc --toc-depth=2"
    fi
    meta="--metadata-file=$TEMPO"
    printf "" > "$TEMPO" # clears the file

    # HACK: somewhat messy way to handle certain files differently, but it works
    if [ "$srcfile" = "$SRC/index.md" ]; then
        echo "blog-posts:" >> "$TEMPO"
        echo "$blogposts" | head -n 5 >> "$TEMPO"

    elif [ "$srcfile" = "$SRC/blog/index.md" ]; then
        echo "blog-posts:" >> "$TEMPO"
        echo "$blogposts" >> "$TEMPO"

    elif dirname "$srcfile" | grep -q "$SRC/blog/*"; then
        printf 'abstract: "%s"\n' "$(getabstract "$srcfile")" >> "$TEMPO"
        # commit=$(getcommit "$srcfile")
        # printf 'commit: %s\n' "$(echo "$commit" | cut -d ' ' -f 1)" >> "$TEMPO"
        # printf 'updated: %s\n' "$(echo "$commit" | cut -d ' ' -f 2)" >> "$TEMPO"
    fi

    $PANDOC --lua-filter=.filters/copyright-year.lua $meta $toc --output="$dstfile" "$srcfile"
done

########################################################################################################################
# Finally copy over all other static files (possibly overwriting previously files, if the user wants it)

find "$SRC" -type f ! -iname "*.md" | while read -r srcfile; do
    dstfile=${srcfile#"$SRC/"}
    dstfile="$DST/$dstfile"
    cp "$srcfile" "$dstfile"
done
